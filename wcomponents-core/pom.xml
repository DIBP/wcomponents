<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<name>wcomponents-core</name>
	<artifactId>wcomponents-core</artifactId>

	<parent>
		<groupId>com.github.bordertech.wcomponents</groupId>
		<artifactId>wcomponents-parent</artifactId>
		<version>1.5.36-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<packaging>jar</packaging>

	<description>
		Core server-side WComponents.
	</description>

	<properties>
		<spotbugs.excludeFilterFile>${basedir}/spotbugs-exclude-filter.xml</spotbugs.excludeFilterFile>
	</properties>

	<profiles>
		<profile>
			<id>skipCoreOptionalTests</id>
			<activation>
				<property>
					<name>skipOptionalTests</name>
					<value>true</value>
				</property>
			</activation>
			<properties>
				<excludedTestGroups>com.github.bordertech.wcomponents.PerformanceTests</excludedTestGroups>
			</properties>
		</profile>

		<!-- Temporary profile to allow sonar to run QA on java 9 or above. However WC is still built for java 8. -->
		<profile>
			<id>test.java.9.profile</id>
			<activation>
				<jdk>[9,)</jdk>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<excludes>
								<!-- Needs to be excluded for Java 9 and above until Reflection fixed -->
								<exclude>com.github.bordertech.wcomponents.util.ObjectGraphDump_Test.java</exclude>
							</excludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>wcomponents-version.properties</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<excludes>
					<exclude>wcomponents-version.properties</exclude>
				</excludes>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<excludedGroups>${excludedTestGroups}</excludedGroups>
					<includes>
						<include>com.github.bordertech.wcomponents.WComponentsTest_Suite.java</include>
						<!-- Included specifically in surefire plugin for java 8 testing -->
						<include>com.github.bordertech.wcomponents.util.ObjectGraphDump_Test.java</include>
					</includes>
				</configuration>
			</plugin>
		</plugins>

	</build>

	<dependencies>

		<dependency>
			<groupId>com.github.bordertech.wcomponents</groupId>
			<artifactId>wcomponents-i18n</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>com.github.bordertech.wcomponents</groupId>
			<artifactId>wcomponents-xslt</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>commons-configuration</groupId>
			<artifactId>commons-configuration</artifactId>
			<version>1.10</version>
			<exclusions>
				<!-- Exclude to use jcl-over-slf4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>1.9.4</version>
			<exclusions>
				<!-- Exclude to use jcl-over-slf4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.5</version>
			<!-- Fix convergence -->
			<exclusions>
				<exclusion>
					<groupId>commons-io</groupId>
					<artifactId>commons-io</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<!-- Needed for server side XSLT -->
			<groupId>net.sourceforge.saxon</groupId>
			<artifactId>saxon</artifactId>
			<version>9.1.0.8</version>
			<type>jar</type>
		</dependency>

		<dependency>
			<!-- Needed for server side XSLT -->
			<groupId>net.sourceforge.saxon</groupId>
			<artifactId>saxon</artifactId>
			<version>9.1.0.8</version>
			<classifier>dom</classifier>
			<scope>runtime</scope>
		</dependency>

		<!-- Handlebars template support. -->
		<dependency>
			<groupId>com.github.jknack</groupId>
			<artifactId>handlebars</artifactId>
			<!-- Above 4.4.X requires java 17 -->
			<version>4.3.1</version>
			<!-- Fix convergence -->
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Velocity template support. -->
		<dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>velocity-engine-core</artifactId>
			<version>2.4</version>
			<!-- Fix convergence -->
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.commons</groupId>
					<artifactId>commons-lang3</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Caching API. -->
		<dependency>
			<groupId>javax.cache</groupId>
			<artifactId>cache-api</artifactId>
			<version>1.1.1</version>
		</dependency>

		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.11.0</version>
			<exclusions>
				<exclusion>
					<groupId>com.google.errorprone</groupId>
					<artifactId>error_prone_annotations</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Required for HTML input sanitization of WTextArea -->
		<!-- Antisamy as of 1.7.X does not support xhtml and will remove the closing tag on "void" elements which will break the XML-->
		<!-- Once WComponents stops using xslt then the latest Antisamy can be used -->
		<!-- https://html.spec.whatwg.org/multipage/syntax.html#void-elements -->
		<dependency>
			<groupId>org.owasp.antisamy</groupId>
			<artifactId>antisamy</artifactId>
			<version>1.6.8</version>
			<!-- Fix convergence -->
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.xmlgraphics</groupId>
					<artifactId>batik-css</artifactId>
				</exclusion>
				<exclusion>
					<groupId>commons-io</groupId>
					<artifactId>commons-io</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.httpcomponents.client5</groupId>
					<artifactId>httpclient5</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.httpcomponents.core5</groupId>
					<artifactId>httpcore5</artifactId>
				</exclusion>
				<exclusion>
					<groupId>net.sourceforge.htmlunit</groupId>
					<artifactId>neko-htmlunit</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- Neko-htmlunit had a package rename as of 3.X.X and cannot be picked up until latest Antisamy can be used -->
		<dependency>
			<groupId>net.sourceforge.htmlunit</groupId>
			<artifactId>neko-htmlunit</artifactId>
			<version>2.70.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.xmlgraphics</groupId>
			<artifactId>batik-css</artifactId>
			<version>1.17</version>
			<exclusions>
				<!-- Exclude to use jcl-over-slf4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
				<!-- Fix convergence -->
				<exclusion>
					<groupId>commons-io</groupId>
					<artifactId>commons-io</artifactId>
				</exclusion>
			</exclusions>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>xerces</groupId>
			<artifactId>xercesImpl</artifactId>
			<version>2.12.2</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Device detection -->
		<dependency>
			<groupId>au.com.flyingkite</groupId>
			<artifactId>mobiledetect</artifactId>
			<version>1.1.1</version>
		</dependency>

		<dependency>
			<groupId>com.github.spullara.mustache.java</groupId>
			<artifactId>compiler</artifactId>
			<version>0.9.14</version>
		</dependency>

		<dependency>
			<groupId>org.apache.tika</groupId>
			<artifactId>tika-core</artifactId>
			<version>2.9.2</version>
			<!-- Fix convergence -->
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>commons-io</groupId>
					<artifactId>commons-io</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Libraries used by WComponents use SLF4J and WComponents currently uses common-loggings which routes to SLF4J.
		SLF4J recommend using their jcl-over-slf4j dependency to direct any libraries using commons-logging to SLF4J
		to avoid classpath issues (Refer to https://www.slf4j.org/legacy.html#jclOverSLF4J).
		This can be used until WComponents is refactored to use SLF4J. -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>

		<!-- Force versions to fix convergence -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.17.0</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.17.0</version>
		</dependency>
		<dependency>
			<groupId>com.google.errorprone</groupId>
			<artifactId>error_prone_annotations</artifactId>
			<version>2.33.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents.client5</groupId>
			<artifactId>httpclient5</artifactId>
			<version>5.4</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents.core5</groupId>
			<artifactId>httpcore5</artifactId>
			<version>5.3</version>
		</dependency>

		<!-- Test dependencies -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>
		<dependency>
			<groupId>xmlunit</groupId>
			<artifactId>xmlunit</artifactId>
			<version>1.6</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junitperf</groupId>
			<artifactId>junitperf</artifactId>
			<version>1.8</version>
			<scope>test</scope>
		</dependency>
		<!-- Performance unit tests fail when SLF4J doesnot have a backing provider -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>${slf4j.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- JSR107 Caching provider. -->
		<dependency>
			<groupId>org.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- JAXB runtime for cache provider -->
		<dependency>
			<groupId>org.glassfish.jaxb</groupId>
			<artifactId>jaxb-runtime</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>
</project>
